use core::quantities
use core::lists

@name("Numerical differentiation")
@url("https://en.wikipedia.org/wiki/Numerical_differentiation")
@description("Compute the numerical derivative of the function $f$ at point $x$ using the central difference method.")
fn diff<X: Dim, Y: Dim>(f: Fn[(X) -> Y], x: X) -> Y / X =
  (f(x + Δx) - f(x - Δx)) / 2 Δx
  where
    Δx = 1e-10 × unit_of(x)

@name("Runga-Kutta method")
@url("https://en.wikipedia.org/wiki/Runge-Kutta_methods")
@description("Solve the ordinary differential equation $y' = f(x, y)$ with initial conditions $y(x_0) = y_0$ using the fourth-order Runge-Kutta method.")
fn dsolve_runge_kutta<X: Dim, Y: Dim>(
  f: Fn[(X, Y) -> Y / X],
  xs: List<X>,
  y0: Y) -> List<Y> =
    if len(xs) == 2
      then [y0, y1]
      else cons(y0, dsolve_runge_kutta(f, tail(xs), y1))
  where x0 = element_at(0, xs)
    and x1 = element_at(1, xs)
    and Δx = x1 - x0
    and k1 = f(x0, y0)
    and k2 = f(x0 + Δx / 2, y0 + Δx k1 / 2)
    and k3 = f(x0 + Δx / 2, y0 + Δx k2 / 2)
    and k4 = f(x0 + Δx, y0 + Δx k3)
    and y1 = y0 + Δx / 6 × (k1 + 2 k2 + 2 k3 + k4)
