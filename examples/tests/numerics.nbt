use numerics::solve
use numerics::diff
use numerics::fixed_point

# Root finding

fn f1(x) = x³ - x - 2
assert_eq(root_bisect(f1, 1, 2, 1e-10, 1e-10), 1.52137970680, 1e-8)

fn f1_prime(x) = 3 x² - 1
assert_eq(root_newton(f1, f1_prime, 1, 1e-10), 1.52137970680, 1e-8)
assert_eq(root_newton(f1, f1_prime, 2, 1e-10), 1.52137970680, 1e-8)

# Fixed point iteration
let a = 3
fn f_sqrt3(x: Scalar) = 0.5 * (a / x + x)

assert_eq(fixed_point(f_sqrt3, 1, 1e-10), sqrt(3), 1e-10)

# Differentiation

assert_eq(diff(log, 2.0), 0.5, 1e-5)
assert_eq(diff(sin, 0.0), 1.0, 1e-5)

assert_eq(diff(sqrt, 1.0), 0.5, 1e-5)

fn f2(x: Scalar) -> Scalar = x² + 4 x + 1

assert_eq(diff(f2, 2.0), 8.0, 1e-5)

fn dist(t: Time) -> Length = 0.5 g0 t^2
fn velocity(t: Time) -> Velocity = diff(dist, t)

assert_eq(velocity(2.0 s), 2.0 s × g0, 1e-3 m/s)

# Differential equations

let t_min = 0 s
let t_max = 2 s
let n_points = 2_000
let t_list = linspace(t_min, t_max, n_points)

let μ = 0.7 / s
let x0 = 2 m

# Numerically solve x'(t) = μ x(t) with x(0) = x0.
# The exact solution is x(t) = x0 e^(μ t).
#
# 'ode(t, x)' is the right-hand side of the ODE.
fn ode(t, x) = μ x

let x_list = dsolve_runge_kutta(ode, t_list, x0)

fn numerical_solution(t) = element_at(idx, x_list)
  where t_range = t_max - t_min
    and idx = floor((t - t_min) / t_range * (n_points - 1))

fn exact_solution(t) = x0 exp(μ t)

assert_eq(numerical_solution(0 s), exact_solution(0 s))
assert_eq(numerical_solution(1 s), exact_solution(1 s), 1e-3 x0)
assert_eq(numerical_solution(2 s), exact_solution(2 s), 1e-3 x0)
