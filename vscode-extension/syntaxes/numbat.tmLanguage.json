{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Numbat",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#decorators"
        },
        {
            "include": "#decorator_args"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#dimension"
        },
        {
            "include": "#identifier"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.numbat",
                    "match": "\\b(per|to|let|fn|where|and|dimension|unit|use|struct|long|short|both|none|if|then|else|true|false|print|assert|assert_eq|type|xor)\\b"
                }
            ]
        },
        "decorators": {
            "patterns": [
                {
                    "name": "support.function.numbat",
                    "match": "@(metric_prefixes|binary_prefixes|aliases|name|url|description|example)\\b"
                }
            ]
        },
        "decorator_args": {
            "patterns": [
                {
                    "name": "string.unquoted",
                    "match": "\\b(decimal)\\b"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric",
                    "match": "\\b([0-9][0-9_]*(\\.[0-9][0-9_]*)?(e[+\\-]?[0-9]+)?|0b[01]+|0o[0-7]+|0x[0-9a-fA-F]+|NaN|inf)\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.number-sign",
                    "match": "#.*$"
                }
            ]
        },
        "dimension": {
            "patterns": [
                {
                    "name": "entity.name.type",
                    "match": "\\b\\p{Lu}[A-Za-z]*\\b"
                }
            ]
        },
        "identifier": {
            "patterns": [
                {
                    "name": "variable.name",
                    "match": "\\b[\\p{Ll}½¼_][\\p{L}½¼_0-9]*\\b"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double",
            "begin": "(?<!\\\\)\"",
            "end": "(?<!\\\\)\"",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\\\S|{{|}}"
                },
                {
                    "name": "constant.character.escape",
                    "begin": "(?<!{){(?!{)",
                    "end": "(?<!})}(?!})",
                    "patterns": [
                        {
                            "include": "$base"
                        }
                    ]
                }
            ]
        }
    },
    "scopeName": "source.numbat"
}
